<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Young+Serif&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
          integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
            integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
            crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"
            integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
            crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"
            integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
            crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <!-- Ensure voteCard.css is loaded after Bootstrap to override its styles -->
    <link rel="stylesheet" href="/stylesheets/voteCard.css">
    <link rel="stylesheet" href="/stylesheets/dashboard.css">
    <title>Document</title>
</head>
<body>
<%- include('navbar') %>
<section id="section_voteCard_container" style="opacity: 0">
    <div id="container">
        <% for (let vote of voteData) { %>
            <div class="card" id="vote_card" data-vote-id="<%= vote.voteId %>">
                <h2 id="text_voteTitle_h2"><%= vote.voteTitle %></h2>
                <% for (let voteOptions of vote.voteOptions) { %>
                    <p class="text_voteOptions_p" data-option-id="<%= voteOptions.id %>" data-vote-id="<%= vote.voteId %>"><%= voteOptions.name %></p>
                <% } %>
                <div class="d-flex justify-content-end" id="div_container_action_button">
                    <img src="/images/icns/trash-fill.svg" alt="icon">
                    <img src="/images/icns/pencil-square.svg" alt="icon">
                </div>
            </div>
        <% } %>
    </div>
</section>

<script src="https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js"></script>
<script src="https://unpkg.com/imagesloaded@5/imagesloaded.pkgd.min.js"></script>
<script src="/public/javascripts/voteUtils.js"></script>
<script type="module">
    // This one is for enable resizing the cards when window is resized

    document.addEventListener('DOMContentLoaded', function () {
        var container = document.querySelector('#container');
        var msnry;

        function initMasonry() {
            if (msnry) {
                msnry.destroy();
            }

            var containerWidth = container.offsetWidth;
            var cardWidth = 400; // Fixed card width
            var gutter = 20; // Gutter width
            var columns = Math.floor((containerWidth + gutter) / (cardWidth + gutter));
            columns = Math.min(Math.max(columns, 1), 4); // Ensure between 1 and 4 columns

            msnry = new Masonry(container, {
                itemSelector: '.card',
                columnWidth: cardWidth,
                gutter: gutter,
                fitWidth: true
            });

            // Set the container width to fit the columns exactly
            container.style.width = (columns * (cardWidth + gutter) - gutter) + 'px';

            msnry.layout();
        }

        // Initialize Masonry after all images have loaded
        imagesLoaded(container, function () {
            initMasonry();
            // Fade in the content
            document.querySelector('#section_voteCard_container').style.opacity = '1';
        });

        // Relayout Masonry on window resize
        var resizeTimer;
        window.addEventListener('resize', function () {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(initMasonry, 250);
        });

    });

    //
    // I found it difficult to move the logic to external file, so I will write here instead.
    //

    // Function to handle click event
    function clickHandler() {
        // const voteID = this.parentElement.getAttribute('data-vote-id');
        // const optionID = this.getAttribute('data-option-id');
        // alert(`You are now on VoteID ${voteID}\nYou clicked option ${optionID}`);
        //
        // // Disable listeners for all options with the same voteID
        // disableListeners(voteID, optionID);
    }

    // Function to disable all click event listeners for siblings
    // function disableListeners(voteID, clickedOptionID) {
    //     // Find all <p> elements that have the same data-vote-id attribute
    //     const options = document.querySelectorAll(`.text_voteOptions_p[data-vote-id="${voteID}"]`);
    //
    //     // Remove click event listeners from all matching elements
    //     options.forEach(option => {
    //         const optionID = option.getAttribute('data-option-id');
    //
    //         if (optionID === clickedOptionID) {
    //             // Add 'clicked_selected' class to the clicked option
    //             option.classList.add('clicked_selected');
    //         } else {
    //             // Add 'clicked_not_selected' class to all siblings that weren't clicked
    //             option.classList.add('clicked_not_selected');
    //         }
    //
    //         // Disable the click event listener
    //         option.removeEventListener('click', clickHandler);
    //     });
    // }
    //
    // // Add event listeners to all options
    // function initializeListeners() {
    //     const options = document.querySelectorAll('.text_voteOptions_p');
    //     options.forEach(option => {
    //         option.addEventListener('click', clickHandler);
    //     });
    // }
    //
    // // Initialize event listeners when the page is loaded
    // document.addEventListener('DOMContentLoaded', () => {
    //     initializeListeners();
    // });



</script>

</body>
</html>